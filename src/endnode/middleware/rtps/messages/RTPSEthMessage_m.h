//
// Generated file, do not edit! Created by nedtool 5.5 from src/endnode/middleware/rtps/messages/RTPSEthMessage.msg.
//

#ifndef __RTPSETHMESSAGE_M_H
#define __RTPSETHMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "../../../../messagetype/EthernetFrame_m.h"
// }}

/**
 * Class generated from <tt>src/endnode/middleware/rtps/messages/RTPSEthMessage.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // RTPS message specification send over Ethernet
 * //
 * message RTPSEthMessage extends EthernetFrame
 * {
 *     // Calculated values
 *     int payloadSize;
 *     int protocolOverhead;
 *     int rtpsMessageSize;
 * 
 *     //  Locator information
 *     int sourceMac;
 *     int destinationMac;
 * 
 *     // Timing info on sample granularity
 *     /// Generation time in the generator
 *     simtime_t generationTime;
 *     /// Reception time at the writer
 *     simtime_t writerArrivalTime;
 *     /// First fragment send at the writer
 *     simtime_t writerFirstInjectionTime;
 *     /// Completely received at the reader
 *     simtime_t subscriberReceiveTime;
 * 
 *     // Other evaluation data
 *     // The unique stream ID of a writer
 *     int globalStreamId;
 *     // The unique rtps message ID of an entity
 *     int64_t rtpsMsgSequenceId;
 * 
 *     // QoS context
 *     int transportPriority;
 *     int ethernetPriority;
 *     int generalFragmentSize;
 * 
 *     //
 *     // RTPS message content
 *     //
 * 
 *     // Header
 *     int sourceNodeId; // GUID part 1
 *     int sourceParticipantId; // GUID part 2
 * 
 *     // AckNack
 *     bool ackNackIsSet;
 *     int readerId;
 *     int writerId;
 *     int readerSNStateBase;
 *     int readerSNStateNbrBits;
 *     bool readerSNStateBitmap[256];
 * 
 *     // Data
 *     bool dataIsSet;
 *     // readerId (s.o.)
 *     // writerId (s.o.)
 *     int writerSN;
 *     int sampleSize;
 * 
 *     // DataFrag
 *     bool dataFragIsSet;
 *     // readerId (s.o.)
 *     // writerId (s.o.)
 *     // writerSN (s.o.)
 *     int fragmentStartingNum;
 *     int fragmentsInSubmessage;
 *     int fragmentSize;
 *     // sampleSize (s.o.)
 * 
 * 
 *     // HeartBeat
 *     bool heartBeatIsSet;
 *     // readerId (s.o.)
 *     // writerId (s.o.)
 *     int firstSN;
 *     int lastSN;
 * 
 * 
 *     // HeartBeatFrag
 *     bool heartBeatFragIsSet;
 *     // readerId (s.o.)
 *     // writerId (s.o.)
 * 
 *     // InfoDestination
 *     bool infoDestinationIsSet;
 *     int destinationNodeId; // GUID part 1
 *     int destinationParticipantId; // GUID part 2
 * 
 *     // InfoTimestamp
 *     bool infoTimestampIsSet;
 *     simtime_t timestamp;
 * 
 *     // NackFrag
 *     bool nackFragIsSet;
 *     // readerId (s.o.)
 *     // writerId (s.o.)
 *     // writerSN (s.o.)    
 *     int fragmentNumberStateBase;
 *     int fragmentNumberStateNbrBits;
 *     bool fragmentNumberBitmap[256];
 * 
 * }
 * </pre>
 */
class RTPSEthMessage : public ::EthernetFrame
{
  protected:
    int payloadSize;
    int protocolOverhead;
    int rtpsMessageSize;
    int sourceMac;
    int destinationMac;
    ::omnetpp::simtime_t generationTime;
    ::omnetpp::simtime_t writerArrivalTime;
    ::omnetpp::simtime_t writerFirstInjectionTime;
    ::omnetpp::simtime_t subscriberReceiveTime;
    int globalStreamId;
    int64_t rtpsMsgSequenceId;
    int transportPriority;
    int ethernetPriority;
    int generalFragmentSize;
    int sourceNodeId;
    int sourceParticipantId;
    bool ackNackIsSet;
    int readerId;
    int writerId;
    int readerSNStateBase;
    int readerSNStateNbrBits;
    bool readerSNStateBitmap[256];
    bool dataIsSet;
    int writerSN;
    int sampleSize;
    bool dataFragIsSet;
    int fragmentStartingNum;
    int fragmentsInSubmessage;
    int fragmentSize;
    bool heartBeatIsSet;
    int firstSN;
    int lastSN;
    bool heartBeatFragIsSet;
    bool infoDestinationIsSet;
    int destinationNodeId;
    int destinationParticipantId;
    bool infoTimestampIsSet;
    ::omnetpp::simtime_t timestamp;
    bool nackFragIsSet;
    int fragmentNumberStateBase;
    int fragmentNumberStateNbrBits;
    bool fragmentNumberBitmap[256];

  private:
    void copy(const RTPSEthMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RTPSEthMessage&);

  public:
    RTPSEthMessage(const char *name=nullptr, short kind=0);
    RTPSEthMessage(const RTPSEthMessage& other);
    virtual ~RTPSEthMessage();
    RTPSEthMessage& operator=(const RTPSEthMessage& other);
    virtual RTPSEthMessage *dup() const override {return new RTPSEthMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);
    virtual int getProtocolOverhead() const;
    virtual void setProtocolOverhead(int protocolOverhead);
    virtual int getRtpsMessageSize() const;
    virtual void setRtpsMessageSize(int rtpsMessageSize);
    virtual int getSourceMac() const;
    virtual void setSourceMac(int sourceMac);
    virtual int getDestinationMac() const;
    virtual void setDestinationMac(int destinationMac);
    virtual ::omnetpp::simtime_t getGenerationTime() const;
    virtual void setGenerationTime(::omnetpp::simtime_t generationTime);
    virtual ::omnetpp::simtime_t getWriterArrivalTime() const;
    virtual void setWriterArrivalTime(::omnetpp::simtime_t writerArrivalTime);
    virtual ::omnetpp::simtime_t getWriterFirstInjectionTime() const;
    virtual void setWriterFirstInjectionTime(::omnetpp::simtime_t writerFirstInjectionTime);
    virtual ::omnetpp::simtime_t getSubscriberReceiveTime() const;
    virtual void setSubscriberReceiveTime(::omnetpp::simtime_t subscriberReceiveTime);
    virtual int getGlobalStreamId() const;
    virtual void setGlobalStreamId(int globalStreamId);
    virtual int64_t getRtpsMsgSequenceId() const;
    virtual void setRtpsMsgSequenceId(int64_t rtpsMsgSequenceId);
    virtual int getTransportPriority() const;
    virtual void setTransportPriority(int transportPriority);
    virtual int getEthernetPriority() const;
    virtual void setEthernetPriority(int ethernetPriority);
    virtual int getGeneralFragmentSize() const;
    virtual void setGeneralFragmentSize(int generalFragmentSize);
    virtual int getSourceNodeId() const;
    virtual void setSourceNodeId(int sourceNodeId);
    virtual int getSourceParticipantId() const;
    virtual void setSourceParticipantId(int sourceParticipantId);
    virtual bool getAckNackIsSet() const;
    virtual void setAckNackIsSet(bool ackNackIsSet);
    virtual int getReaderId() const;
    virtual void setReaderId(int readerId);
    virtual int getWriterId() const;
    virtual void setWriterId(int writerId);
    virtual int getReaderSNStateBase() const;
    virtual void setReaderSNStateBase(int readerSNStateBase);
    virtual int getReaderSNStateNbrBits() const;
    virtual void setReaderSNStateNbrBits(int readerSNStateNbrBits);
    virtual unsigned int getReaderSNStateBitmapArraySize() const;
    virtual bool getReaderSNStateBitmap(unsigned int k) const;
    virtual void setReaderSNStateBitmap(unsigned int k, bool readerSNStateBitmap);
    virtual bool getDataIsSet() const;
    virtual void setDataIsSet(bool dataIsSet);
    virtual int getWriterSN() const;
    virtual void setWriterSN(int writerSN);
    virtual int getSampleSize() const;
    virtual void setSampleSize(int sampleSize);
    virtual bool getDataFragIsSet() const;
    virtual void setDataFragIsSet(bool dataFragIsSet);
    virtual int getFragmentStartingNum() const;
    virtual void setFragmentStartingNum(int fragmentStartingNum);
    virtual int getFragmentsInSubmessage() const;
    virtual void setFragmentsInSubmessage(int fragmentsInSubmessage);
    virtual int getFragmentSize() const;
    virtual void setFragmentSize(int fragmentSize);
    virtual bool getHeartBeatIsSet() const;
    virtual void setHeartBeatIsSet(bool heartBeatIsSet);
    virtual int getFirstSN() const;
    virtual void setFirstSN(int firstSN);
    virtual int getLastSN() const;
    virtual void setLastSN(int lastSN);
    virtual bool getHeartBeatFragIsSet() const;
    virtual void setHeartBeatFragIsSet(bool heartBeatFragIsSet);
    virtual bool getInfoDestinationIsSet() const;
    virtual void setInfoDestinationIsSet(bool infoDestinationIsSet);
    virtual int getDestinationNodeId() const;
    virtual void setDestinationNodeId(int destinationNodeId);
    virtual int getDestinationParticipantId() const;
    virtual void setDestinationParticipantId(int destinationParticipantId);
    virtual bool getInfoTimestampIsSet() const;
    virtual void setInfoTimestampIsSet(bool infoTimestampIsSet);
    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
    virtual bool getNackFragIsSet() const;
    virtual void setNackFragIsSet(bool nackFragIsSet);
    virtual int getFragmentNumberStateBase() const;
    virtual void setFragmentNumberStateBase(int fragmentNumberStateBase);
    virtual int getFragmentNumberStateNbrBits() const;
    virtual void setFragmentNumberStateNbrBits(int fragmentNumberStateNbrBits);
    virtual unsigned int getFragmentNumberBitmapArraySize() const;
    virtual bool getFragmentNumberBitmap(unsigned int k) const;
    virtual void setFragmentNumberBitmap(unsigned int k, bool fragmentNumberBitmap);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RTPSEthMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RTPSEthMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __RTPSETHMESSAGE_M_H


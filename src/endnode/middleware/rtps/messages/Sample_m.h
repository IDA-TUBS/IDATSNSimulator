//
// Generated file, do not edit! Created by nedtool 5.5 from src/endnode/middleware/rtps/messages/Sample.msg.
//

#ifndef __SAMPLE_M_H
#define __SAMPLE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/endnode/middleware/rtps/messages/Sample.msg:18</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * // 
 * //
 * // A generated by a corresponding generator or a reader when passing it to the sink after sample completion.
 * //
 * packet Sample
 * {
 *     // Parameters assigned in the generator
 *     // Protocol relevant data
 *     /// The size of the sample (payload)
 *     int size;
 *     /// The sequence number of the sample
 *     int sequenceNumber;
 *     /// The unique global stream ID
 *     int globalStreamId;
 * 
 *     /// Relevant timestamps
 *     /// Generation time in the generator
 *     simtime_t generationTime;
 *     /// Reception time at the writer
 *     simtime_t writerArrivalTime;
 *     /// First fragment send at the writer
 *     simtime_t writerFirstInjectionTime;
 *     /// Completely received at the reader
 *     simtime_t subscriberReceiveTime;
 * 
 * 
 *     // The reader context and writer context for statistical evaluation
 *     int readerEntityId;
 *     int readerParticipantEntityID;
 *     int writerEntityId;
 *     int writerParticipantEntityID;
 * 
 *     // Violation indicators
 *     /// Deadline expired after sample creation (cf. generatedTime)
 *     bool deadlineViolation;
 *     /// Lifespan expired after cache insertion (cf. writerArrivalTime)
 *     bool lifespanExpired;
 *     /// Deleted before completion due to an exeeded history size on the reader site
 *     bool historySizeExeeded;
 * }
 * </pre>
 */
class Sample : public ::omnetpp::cPacket
{
  protected:
    int size;
    int sequenceNumber;
    int globalStreamId;
    ::omnetpp::simtime_t generationTime;
    ::omnetpp::simtime_t writerArrivalTime;
    ::omnetpp::simtime_t writerFirstInjectionTime;
    ::omnetpp::simtime_t subscriberReceiveTime;
    int readerEntityId;
    int readerParticipantEntityID;
    int writerEntityId;
    int writerParticipantEntityID;
    bool deadlineViolation;
    bool lifespanExpired;
    bool historySizeExeeded;

  private:
    void copy(const Sample& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Sample&);

  public:
    Sample(const char *name=nullptr, short kind=0);
    Sample(const Sample& other);
    virtual ~Sample();
    Sample& operator=(const Sample& other);
    virtual Sample *dup() const override {return new Sample(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSize() const;
    virtual void setSize(int size);
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
    virtual int getGlobalStreamId() const;
    virtual void setGlobalStreamId(int globalStreamId);
    virtual ::omnetpp::simtime_t getGenerationTime() const;
    virtual void setGenerationTime(::omnetpp::simtime_t generationTime);
    virtual ::omnetpp::simtime_t getWriterArrivalTime() const;
    virtual void setWriterArrivalTime(::omnetpp::simtime_t writerArrivalTime);
    virtual ::omnetpp::simtime_t getWriterFirstInjectionTime() const;
    virtual void setWriterFirstInjectionTime(::omnetpp::simtime_t writerFirstInjectionTime);
    virtual ::omnetpp::simtime_t getSubscriberReceiveTime() const;
    virtual void setSubscriberReceiveTime(::omnetpp::simtime_t subscriberReceiveTime);
    virtual int getReaderEntityId() const;
    virtual void setReaderEntityId(int readerEntityId);
    virtual int getReaderParticipantEntityID() const;
    virtual void setReaderParticipantEntityID(int readerParticipantEntityID);
    virtual int getWriterEntityId() const;
    virtual void setWriterEntityId(int writerEntityId);
    virtual int getWriterParticipantEntityID() const;
    virtual void setWriterParticipantEntityID(int writerParticipantEntityID);
    virtual bool getDeadlineViolation() const;
    virtual void setDeadlineViolation(bool deadlineViolation);
    virtual bool getLifespanExpired() const;
    virtual void setLifespanExpired(bool lifespanExpired);
    virtual bool getHistorySizeExeeded() const;
    virtual void setHistorySizeExeeded(bool historySizeExeeded);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Sample& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Sample& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SAMPLE_M_H


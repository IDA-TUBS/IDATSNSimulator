//
// Generated file, do not edit! Created by nedtool 5.5 from src/messagetype/EthernetFrame.msg.
//

#ifndef __ETHERNETFRAME_M_H
#define __ETHERNETFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/messagetype/EthernetFrame.msg:17</tt> by nedtool.
 * <pre>
 * message EthernetFrame
 * {
 *     int frameSize;      //size of the frame in bytes
 *     int payloadSize;    //size of the payload (including padding bits, which are necessary when the payload is too short)
 *     int packetSize;     //frame + sync/ifg
 *     int MACsource;      //MAC address of the source interface unit
 *     int MACdest;        //MAC address of the destination interface unit
 *     int priority;       //global priority of the stream, defining the traffic class in AVB/TSN/*02.1Q, is not unique! 
 *     int streamID;       // A global ID that identifies the application
 *     bool isMulticast;   // if switched to true a multcast message otherwie singlecast
 *     bool isBroadcast;   // is this a broadcast message? (if so, the destination MAC should be -1)
 *     int64_t frameSequenceID; // The frame sequence ID. It is unique for a given global ID
 *     simtime_t injectionTime;
 * }
 * </pre>
 */
class EthernetFrame : public ::omnetpp::cMessage
{
  protected:
    int frameSize;
    int payloadSize;
    int packetSize;
    int MACsource;
    int MACdest;
    int priority;
    int streamID;
    bool isMulticast;
    bool isBroadcast;
    int64_t frameSequenceID;
    ::omnetpp::simtime_t injectionTime;

  private:
    void copy(const EthernetFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetFrame&);

  public:
    EthernetFrame(const char *name=nullptr, short kind=0);
    EthernetFrame(const EthernetFrame& other);
    virtual ~EthernetFrame();
    EthernetFrame& operator=(const EthernetFrame& other);
    virtual EthernetFrame *dup() const override {return new EthernetFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFrameSize() const;
    virtual void setFrameSize(int frameSize);
    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);
    virtual int getPacketSize() const;
    virtual void setPacketSize(int packetSize);
    virtual int getMACsource() const;
    virtual void setMACsource(int MACsource);
    virtual int getMACdest() const;
    virtual void setMACdest(int MACdest);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getStreamID() const;
    virtual void setStreamID(int streamID);
    virtual bool getIsMulticast() const;
    virtual void setIsMulticast(bool isMulticast);
    virtual bool getIsBroadcast() const;
    virtual void setIsBroadcast(bool isBroadcast);
    virtual int64_t getFrameSequenceID() const;
    virtual void setFrameSequenceID(int64_t frameSequenceID);
    virtual ::omnetpp::simtime_t getInjectionTime() const;
    virtual void setInjectionTime(::omnetpp::simtime_t injectionTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ETHERNETFRAME_M_H

